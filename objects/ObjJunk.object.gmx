<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///spin
image_angle += spinRate;

//spin if not a grappled capsule
if !((class == 6) &amp;&amp; (isGrappled))
{
    image_angle += spinRate;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///grappled capsule movement
if (class == 6) &amp;&amp; (isGrappled)
{
    x = grappleProjectile.x;
    y = grappleProjectile.y;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///impact check
if (y &gt;= ObjEnvPlanet.y)
{
    instance_destroy();

    //reset planet reduction
    with ObjEnvPlanet
    {
        isReducing = false;
        alarm[0] = csEnvPlanetReductionTimeout;
    }

    //if capsule class and not grappled, execute on-destruction script
    if (class == 6) &amp;&amp; !(isGrappled)
    {
        ScrJunkCapDestroyed();
    }

    //else if not capsule class add to planet mass
    else if (class != 6)
    {
        if (global.planetMass &gt; 0)
        {
            global.planetMass -= classArray[type,2];
        }
        else
        {
            global.planetMass = 0;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>601</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_execute_script</functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>9</kind>
            <script>ScrJunkDamageFlicker</script>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///destruction &amp; fragmentation
if (hp &lt;= 0)
{
    //destroy
    instance_destroy();

    //if not capsule class, increment score &amp; create popup
    if (class != 6)
    {
        ScrScoreCalc(classArray[type,2],classArray[type,3],csScoreCalcMultiplierJunk);
    }

    //if medium or large, fragment
    if (class == 1) or (class == 2)
    {
        var _class, _childJunkIndex, _childJunkSelection, _childJunkQuantity, _speed, _spriteWidth, _spriteHeight, _targetX;

        //inherit vars for use in child junk
        _class = class;
        _speed = speed;
        _spriteWidth = sprite_width;
        _spriteHeight = sprite_height;
        _targetX = targetX;
        _childJunkIndex = 6;

        //determine class &amp; determine number of fragments to loop through
        switch (_class)
        {
            case 1: _childJunkQuantity = 3; break;
            case 2: _childJunkQuantity = 2; break;
        }

        //loop through &amp; create child junk items
        repeat (_childJunkQuantity)
        {
            _childJunkSelection = classArray[type,_childJunkIndex];
            _childJunkIndex += 1;

            //generate child junk within bounds of parent sprite
            newJunk = instance_create(ScrGeneralCenteredRange(x , _spriteWidth), ScrGeneralCenteredRange(y , _spriteHeight), ObjJunk);
            with newJunk
            {
                //select new class from the tier below
                class = _class -1;

                //select type
                type = _childJunkSelection;

                //assign class array
                switch (class)
                {
                    case 0: classArray = global.arrayJunkSml;   break;
                    case 1: classArray = global.arrayJunkMed;   break;
                }

                //prevent child targetX / variance being placed out of bounds
                if (_targetX &lt; (csJunkTargetVariance))
                {
                    targetX = random(csJunkTargetVariance);
                }
                else if (_targetX &gt; room_width - (csJunkTargetVariance))
                {
                    targetX = room_width - random(csJunkTargetVariance);
                }
                else
                {
                    targetX = ScrGeneralCenteredRange(_targetX , csJunkTargetVariance);
                }

                //init child
                event_user(0);
            }
        }
    }

    //else if special class with on-destruction script, execute it
    else if (class == 3)  &amp;&amp; (global.arrayJunkSpc[type,6] != -1)
    {
        script_execute (global.arrayJunkSpc[type,6]);
    }

    //else if capsule class, execute on-destruction script
    else if (class == 6)
    {
        ScrJunkCapDestroyed();
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///out of bounds check
if (x &lt; 0)
{
    x = 0;
}
else if (x &gt; room_width)
{
    x = room_width;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>601</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_execute_script</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>9</kind>
            <script>ScrJunkInit</script>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>2,2</point>
  </PhysicsShapePoints>
</object>
